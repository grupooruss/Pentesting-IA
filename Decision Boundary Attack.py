from art.attacks.evasion import DecisionBoundary
from art.estimators.classification import KerasClassifier
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn import datasets
import numpy as np

# Carga un conjunto de datos de ejemplo
iris = datasets.load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=42)

# Crea y entrena un modelo de clasificaci칩n b치sico
model = Sequential()
model.add(Dense(units=8, activation='relu', input_shape=(4,)))
model.add(Dense(units=3, activation='softmax'))
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=50, verbose=0)

# Crea un clasificador ART a partir del modelo de Keras
art_classifier = KerasClassifier(model=model, clip_values=(0, 1), use_logits=False)

# Crea un ataque de salto de decisi칩n con ART
attack = DecisionBoundary(art_classifier, max_iter=100, epsilon=0.1)

# Genera ejemplos adversarios
X_test_adv = attack.generate(x=X_test)

# Verifica la precisi칩n del modelo en los ejemplos adversarios
predictions = np.argmax(model.predict(X_test_adv), axis=1)
accuracy = np.sum(predictions == y_test) / len(y_test)
print(f'Accuracy on adversarial examples: {accuracy * 100}%')
